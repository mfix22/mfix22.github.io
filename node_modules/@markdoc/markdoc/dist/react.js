// src/renderers/react/shared.ts
function tagName(name, components) {
  return typeof name !== "string" ? "Fragment" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
}

// src/renderers/react/react.ts
function dynamic(node, React, { components = {} } = {}) {
  function deepRender(value) {
    if (value == null || typeof value !== "object")
      return value;
    if (Array.isArray(value))
      return value.map((item) => deepRender(item));
    if (value.$$mdtype === "Tag")
      return render(value);
    if (typeof value !== "object")
      return value;
    const output = {};
    for (const [k, v] of Object.entries(value))
      output[k] = deepRender(v);
    return output;
  }
  function render(node2) {
    if (Array.isArray(node2))
      return React.createElement(React.Fragment, null, ...node2.map(render));
    if (node2 === null || typeof node2 !== "object")
      return node2;
    const {
      name,
      attributes: { class: className, ...attrs } = {},
      children = []
    } = node2;
    if (className)
      attrs.className = className;
    return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender(attrs), ...children.map(render));
  }
  return render(node);
}
export {
  dynamic as default
};
